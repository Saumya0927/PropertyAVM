version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: avm-postgres
    environment:
      POSTGRES_DB: property_valuation
      POSTGRES_USER: avm_user
      POSTGRES_PASSWORD: avm_secure_pass_2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - avm-network

  redis:
    image: redis:7-alpine
    container_name: avm-redis
    ports:
      - "6379:6379"
    networks:
      - avm-network

  localstack:
    image: localstack/localstack:latest
    container_name: avm-localstack
    ports:
      - "4566:4566"
      - "4571:4571"
    environment:
      - SERVICES=lambda,s3,dynamodb,cloudwatch
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - LAMBDA_EXECUTOR=docker
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "./infrastructure/localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - avm-network

  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: avm-mlflow
    ports:
      - "5001:5000"
    environment:
      - BACKEND_STORE_URI=postgresql://avm_user:avm_secure_pass_2024@postgres:5432/property_valuation
      - DEFAULT_ARTIFACT_ROOT=s3://mlflow-artifacts/
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - MLFLOW_S3_ENDPOINT_URL=http://localstack:4566
    depends_on:
      - postgres
      - localstack
    networks:
      - avm-network
    command: >
      mlflow server
      --backend-store-uri postgresql://avm_user:avm_secure_pass_2024@postgres:5432/property_valuation
      --default-artifact-root s3://mlflow-artifacts/
      --host 0.0.0.0
      --port 5000

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: avm-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://avm_user:avm_secure_pass_2024@postgres:5432/property_valuation
      - REDIS_URL=redis://redis:6379
      - LOCALSTACK_URL=http://localstack:4566
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    depends_on:
      - postgres
      - redis
      - localstack
      - mlflow
    volumes:
      - ./backend:/app
      - ./ml-pipeline/models:/app/models
    networks:
      - avm-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: avm-frontend
    ports:
      - "3003:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - avm-network

  grafana:
    image: grafana/grafana:latest
    container_name: avm-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - avm-network

  prometheus:
    image: prom/prometheus:latest
    container_name: avm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - avm-network

networks:
  avm-network:
    driver: bridge

volumes:
  postgres_data:
  grafana_data:
  prometheus_data: